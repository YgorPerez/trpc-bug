import { type GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import styles from "./index.module.css";
import { createServerSideHelpers } from "@trpc/react-query/server";
import transformer from "../utils/transformer";
import { appRouter } from "../server/api/root";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  const helloQuery = api.example.hello.useQuery({ text: "from trpc" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <h1 className={styles.title}>
            Create <span className={styles.pinkSpan}>T3</span> App
          </h1>
          <div className={styles.cardRow}>
            <Link
              className={styles.card}
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className={styles.cardTitle}>First Steps →</h3>
              <div className={styles.cardText}>
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className={styles.card}
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className={styles.cardTitle}>Documentation →</h3>
              <div className={styles.cardText}>
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <p className={styles.showcaseText}>
            {helloQuery.data
              ? helloQuery.data.greeting
              : "Loading tRPC query..."}
          </p>
        </div>
      </main>
    </>
  );
};

export const runtime = "experimental-edge";

export const getServerSideProps: GetServerSideProps = async () => {
  const trpc = createServerSideHelpers({
    router: appRouter,
    ctx: {},
    transformer,
  });
  await trpc.example.hello.prefetch({ text: "from trpc" });

  return {
    props: {
      trpcState: trpc.dehydrate(),
    },
  };
};

export default Home;
